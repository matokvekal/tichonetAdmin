@using System.Web.Optimization
@using Business_Logic

<br />
<div class="header">
    <hr class="hr-thin" />
    <h4>Lines</h4>
    <div class="glyphicon glyphicon-chevron-up toggle" id="btToggleLines"></div>
    <hr class="hr-thin" />
</div>
<div class="content" id="dLinesTable">
    <table id="grLines"></table>
    <div id="pgLines"></div>
</div>

@section scripts{
    @Scripts.Render("~/bundles/jqGrid")
    <script>
        $(function() {
            var printWindow = null;
            var grid = $("#grLines");
            var pagerID = "#pgLines";
            //Toggle buttons
            $("#btToggleLines").click(function() {
                var cls = $("#btToggleLines").attr("class");
                if (cls == "glyphicon glyphicon-chevron-up toggle") {
                    $("#btToggleLines").attr("class", "glyphicon glyphicon-chevron-down toggle");
                } else {
                    $("#btToggleLines").attr("class", "glyphicon glyphicon-chevron-up toggle");
                }
                $("#dLinesTable").toggle();
            });

            grid.jqGrid({
                    url: '/api' + '@Url.Action("GetLines", "Lines")',
                    datatype: "json",
                    loadonce: false,
                    reloadAfterSubmit: true,
                    height: "100%",
                    autowidth: true,
                    regional: "il",
                    hidegrid: false,
                    multiselect: false,
                    pager: pagerID,
                    mtype: "get",
                    rowNum: 25,
                    rowList: [5, 25, 50, 100],
                    viewrecords: true,
                    ignoreCase: true,
                    loadui: "disable",
                    altRows: false,
                    sortable: true,
                    altclass: "ui-state-default",
                    editurl: '/api' + '@Url.Action("EditLine", "Lines")',
                    sortname: 'LineName',
                    sortorder: "asc",
                    colNames: [
                        "Id",
                        "LineName",
                        "LineNumber",
                        "Direction",
                        "IsActive",
                        "totalStudents",
                        "Duration",
                        "Sun",
                        "Mon",
                        "Tue",
                        "Wed",
                        "Thu",
                        "Fri",
                        "Sut",
                        "BusIdDescription",
                        "BusId",
                        "PlateNumber",
                        "BusCompanyName",
                        "seats",
                        ""
                    ],
                    colModel: [
                        { name: "Id", index: 'Id', key: true, hidden: true, sortable: false, editable: false, edittype: "text", search: false },
                        { name: 'LineName', index: 'LineName', sorttype: "text", width: 110, editable: true },
                        { name: 'LineNumber', index: 'LineNumber', sorttype: "text", width: 110, editable: true },
                        {
                            name: 'Direction',
                            index: 'Direction',
                            sorttype: "select",
                            width: 110,
                            editable: true,
                            search: false,
                            edittype: 'select',
                            formatter: 'select',
                            editoptions: { value: { '0': 'To', '1': 'From' } }
                        },
                        { name: 'IsActive', index: 'IsActive', sorttype: "text", width: 90, editable: true, edittype: "checkbox", editoptions: { value: "True:False" }, align: 'center', formatter: 'checkbox', search: false },
                        { name: 'totalStudents', index: 'totalStudents', sorttype: "text", width: 110, editable: false },
                        { name: 'Duration', index: 'Duration', sorttype: "text", width: 110, editable: false, search: false },
                        { name: 'Sun', index: 'Sun', sorttype: "text", width: 60, editable: true, edittype: "checkbox", editoptions: { value: "True:False" }, align: 'center', formatter: 'checkbox', search: false },
                        { name: 'Mon', index: 'Mon', sorttype: "text", width: 60, editable: true, edittype: "checkbox", editoptions: { value: "True:False" }, align: 'center', formatter: 'checkbox', search: false },
                        { name: 'Tue', index: 'Tue', sorttype: "text", width: 60, editable: true, edittype: "checkbox", editoptions: { value: "True:False" }, align: 'center', formatter: 'checkbox', search: false },
                        { name: 'Wed', index: 'Wed', sorttype: "text", width: 60, editable: true, edittype: "checkbox", editoptions: { value: "True:False" }, align: 'center', formatter: 'checkbox', search: false },
                        { name: 'Thu', index: 'Thu', sorttype: "text", width: 60, editable: true, edittype: "checkbox", editoptions: { value: "True:False" }, align: 'center', formatter: 'checkbox', search: false },
                        { name: 'Fri', index: 'Fri', sorttype: "text", width: 60, editable: true, edittype: "checkbox", editoptions: { value: "True:False" }, align: 'center', formatter: 'checkbox', search: false },
                        { name: 'Sut', index: 'Sut', sorttype: "text", width: 60, editable: true, edittype: "checkbox", editoptions: { value: "True:False" }, align: 'center', formatter: 'checkbox', search: false },
                        { name: 'BusIdDescription', index: 'BusIdDescription', hidden: true, sortable: false, editable: false, edittype: "text", search: false },
                        {
                            name: 'BusId',
                            index: 'BusId',
                            sorttype: "text",
                            editable: true,
                            search: false,
                            edittype: "select",
                            editoptions: {
                                dataUrl: '/api' + '@Url.Action("GetAvailableBuses", "Lines")',
                                postData: function(rowid, value, cmName) {
                                    return {
                                        lineId: rowid
                                    }
                                },
                                buildSelect: function(data) {
                                    var response = jQuery.parseJSON(data);
                                    var s = '<select>';
                                    if (response && response.Data.length) {
                                        for (var i = 0, l = response.Data.length; i < l; i++) {
                                            var ri = response.Data[i];
                                            s += '<option value="' + ri.Value + '" title="' + ri.Title + '">' + ri.Text + '</option>';
                                        }
                                    }
                                    return s + "</select>";
                                }
                            }
                        },
                        { name: 'PlateNumber', index: 'PlateNumber', sorttype: "text", width: 110, editable: false, search: false },
                        { name: 'BusCompanyName', index: 'BusCompanyName', sorttype: "text", width: 110, editable: false, search: false },
                        { name: 'seats', index: 'seats', sorttype: "text", width: 110, editable: false, search: false },
                        {
                            name: 'ActionsBtn', index: 'ActionsBtn', width: 50, align: 'center', search: false, formatter: 'actions', formatoptions: {
                            keys: true,
                            editformbutton: false,
                            editbutton: true,
                            delbutton: true
                        } },
                    ],
                    saveAfterSelect: true,
                    afterSubmit: function () {
                        $(this).jqGrid("setGridParam", {datatype: 'json'});
                        return [true];
                    },
                    onSelectRow: function(id) {
                        lastSelection = -1;
                    },
                    ondblClickRow: function(rowid, iRow, iCol) {
                        editRow(rowid);
                        //grid.editCell(iRow, iCol, true);
                    },
                    loadComplete: function(data) {
                        $("div.ui-inline-edit").attr("title", "@DictExpressionBuilderSystem.Translate("grid.EditSelectedRow")");
                        $("div.ui-inline-del").attr("title", "@DictExpressionBuilderSystem.Translate("grid.DeleteSelectedRow")");
                        $("div.ui-inline-save").attr("title", "@DictExpressionBuilderSystem.Translate("grid.SaveRow")");
                        $("div.ui-inline-cancel").attr("title", "@DictExpressionBuilderSystem.Translate("grid.CancelRowEditing")");

                        var colModel = grid.getGridParam('colModel');
                        $.each(colModel, function(index, col) {
                            if (col.edittype === 'select') {
                                $.each(grid.getDataIDs(), function(index, id) {
                                    var row = grid.getRowData(id);
                                    var value = row[col.name];
                                    var text = row[col.name + "Description"];
                                    row[col.name] = text;
                                    grid.setRowData(id, row);
                                });
                            }
                        });
                    }
                })
                .navGrid(pagerID, {
                        add: false,
                        edit: false,
                        del: false,
                        deltitle: "@DictExpressionBuilderSystem.Translate("grid.DeleteRow")", //"Delete row",
                        refresh: true,
                        refreshtitle: "@DictExpressionBuilderSystem.Translate("grid.Reload")", //"Reload",
                        search: false,
                        view: false
                    } /*, {}, { closeAfterEdit: true }, { closeAfterAdd: true }*/
                )
                .inlineNav(pagerID, {
                        add: false,
                        edit: false,
                        edittitle: "@DictExpressionBuilderSystem.Translate("grid.EditSelectedRow")", //"Edit selected row",
                        savetitle: "@DictExpressionBuilderSystem.Translate("grid.SaveRow")", //"Save row",
                        canceltitle: "@DictExpressionBuilderSystem.Translate("grid.CancelRowEditing")" //"Cancel row editing"
                    }
                )
                .navButtonAdd(pagerID, {
                        id: "print",
                        buttonicon: "ui-icon-print",
                        caption: "",
                        title: "@DictExpressionBuilderSystem.Translate("grid.Print")", //"Print"
                        onClickButton: function() {
                            var postData = grid.jqGrid('getGridParam', 'postData');
                            var urlGetExcel = '/api' + "@Url.Action("GetPrint", "Lines")";
                            var url = urlGetExcel + "?" + $.param(postData);
                            if (printWindow == null || printWindow.closed) {
                                printWindow = window.open('', '', 'height=600,width=1000');
                            } else {
                                printWindow.focus();
                            }
                            $.ajax({
                                url: url,
                                type: 'GET',
                                dataType: 'json',
                                contentType: 'application/json; charset=utf-8',
                                success: function(data) {
                                    if (printWindow != undefined) {
                                        printWindow.document.clear();
                                        printWindow.document.write('<html><head><title>Lines</title>');
                                        printWindow.document.write('</head><body >');
                                        printWindow.document.write('<div class="page">');
                                        printWindow.document.write('<div class="subpage">');

                                        //TODO Draw Lines Table
                                        printWindow.document.write('test');
                                        printWindow.document.write(data);

                                        printWindow.document.write('</div>');
                                        printWindow.document.write('</div>');
                                        printWindow.document.write('</body></html>');
                                        printWindow.document.close();
                                        printWindow.print();
                                    }
                                }
                            });

                        }
                    }
                )
                .navButtonAdd(pagerID, {
                        id: "toExcel",
                        buttonicon: "ui-icon-disk",
                        caption: "",
                        title: "@DictExpressionBuilderSystem.Translate("grid.ToExcel")", //"To Excel"
                        onClickButton: function() {
                            var postData = grid.jqGrid('getGridParam', 'postData');
                            var urlGetExcel = '/api' + "@Url.Action("GetExcel", "Lines")";
                            var url = urlGetExcel + "?" + $.param(postData);
                            window.location.href = url;
                        }
                    }
                )
                .filterToolbar({
                        stringResult: true,
                        enableClear: false
                    }
                );

            //Hide buttons "Clear search"
            $(".ui-search-clear").remove();

            var lastSelection;

            function editRow(id) {
                if (id && id !== lastSelection) {
                    grid.jqGrid('restoreRow', lastSelection);
                    //grid.jqGrid('editRow', id, { keys: true });
                    //jQuery.fn.fmatter.rowactions.call($("#grLines tbody").find("#" + id + " div.ui-inline-edit"), 'edit');
                    rowactions.call(grid.find("tbody").find("#" + id + " div.ui-inline-edit"), 'edit');
                    lastSelection = id;
                }
            }


            var rowactions = function (b) {
                var a = $;
                var c = a(this).closest("tr.jqgrow"),
                    d = c.attr("id"),
                    e = a(this).closest("table.ui-jqgrid-btable").attr("id").replace(/_frozen([^_]*)$/, "$1"),
                    f = a("#" + e),
                    g = f[0],
                    h = g.p,
                    i = h.colModel[a.jgrid.getCellIndex(this)],
                    j = i.frozen ? a("tr#" + d + " td:eq(" + a.jgrid.getCellIndex(this) + ") > div", f) : a(this).parent(),
                    k = {
                        extraparam: {}
                    },
                    l = function (b, c) {
                        a.isFunction(k.afterSave) && k.afterSave.call(g, b, c);
                        j.find("div.ui-inline-edit,div.ui-inline-del").show();
                        j.find("div.ui-inline-save,div.ui-inline-cancel").hide();
                        f.trigger("reloadGrid");
                    },
                    m = function (b) {
                        a.isFunction(k.afterRestore) && k.afterRestore.call(g, b);
                        j.find("div.ui-inline-edit,div.ui-inline-del").show();
                        j.find("div.ui-inline-save,div.ui-inline-cancel").hide();
                    };
                void 0 !== i.formatoptions && (k = a.extend(k, i.formatoptions));
                void 0 !== h.editOptions && (k.editOptions = h.editOptions);
                void 0 !== h.delOptions && (k.delOptions = h.delOptions);
                c.hasClass("jqgrid-new-row") && (k.extraparam[h.prmNames.oper] = h.prmNames.addoper);
                var n = {
                    keys: k.keys,
                    oneditfunc: k.onEdit,
                    successfunc: k.onSuccess,
                    url: k.url,
                    extraparam: k.extraparam,
                    aftersavefunc: l,
                    errorfunc: k.onError,
                    afterrestorefunc: m,
                    restoreAfterError: k.restoreAfterError,
                    mtype: k.mtype,
                    reloadAfterSubmit: true
                };
                switch (b) {
                    case "edit":
                        f.jqGrid("editRow", d, n);
                        j.find("div.ui-inline-edit,div.ui-inline-del").hide();
                        j.find("div.ui-inline-save,div.ui-inline-cancel").show();
                        f.triggerHandler("jqGridAfterGridComplete");
                        break;
                    case "save":
                        f.jqGrid("saveRow", d, n);
                        j.find("div.ui-inline-edit,div.ui-inline-del").show();
                        j.find("div.ui-inline-save,div.ui-inline-cancel").hide();
                        f.triggerHandler("jqGridAfterGridComplete");
                        break;
                    case "cancel":
                        f.jqGrid("restoreRow", d, m);
                        j.find("div.ui-inline-edit,div.ui-inline-del").show();
                        j.find("div.ui-inline-save,div.ui-inline-cancel").hide();
                        f.triggerHandler("jqGridAfterGridComplete");
                        break;
                    case "del":
                        f.jqGrid("delGridRow", d, k.delOptions);
                        break;
                    case "formedit":
                        f.jqGrid("setSelection", d);
                        f.jqGrid("editGridRow", d, k.editOptions);
                }
            };

        });
    </script>
}