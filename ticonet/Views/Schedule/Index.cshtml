@using System.Web.Optimization
@using Business_Logic
@using Business_Logic.Enums

<div class="content inline-block" style="height: calc(100% - 30px); width: 100%; display: inline-block; margin: 20px 0 0 0; padding: 0;">
    <div style="margin: 0; padding: 0; height: 100%; width: calc(100% - 500px); float: left; border: solid silver thin; overflow: hidden;">
        <div style="margin: 0; padding: 0; height: 70px; width: 400px; float: right; border: solid silver thin;">
            <p><input type="text" id="dateFrom"> :@DictExpressionBuilderSystem.Translate("Schedule.DateFrom")</p>
            <p><input type="text" id="dateTo"> :@DictExpressionBuilderSystem.Translate("Schedule.DateTo")</p>
        </div>
        <div style="margin: 0; padding: 0; height: 50px; width: 100%; float: right; border: solid silver thin;">
            <input type="checkbox" value="true" name="ArriveTime" checked> @DictExpressionBuilderSystem.Translate("Schedule.ArriveTime")&nbsp;
            <input type="checkbox" value="true" name="LeaveTime" checked> @DictExpressionBuilderSystem.Translate("Schedule.LeaveTime")<br />
            <input type="checkbox" value="true" name="Sun" checked> @DictExpressionBuilderSystem.Translate("Schedule.Sun")&nbsp;
            <input type="checkbox" value="true" name="Mon" checked> @DictExpressionBuilderSystem.Translate("Schedule.Mon")&nbsp;
            <input type="checkbox" value="true" name="Tue" checked> @DictExpressionBuilderSystem.Translate("Schedule.Tue")&nbsp;
            <input type="checkbox" value="true" name="Wed" checked> @DictExpressionBuilderSystem.Translate("Schedule.Wed")&nbsp;
            <input type="checkbox" value="true" name="Thu" checked> @DictExpressionBuilderSystem.Translate("Schedule.Thu")&nbsp;
            <input type="checkbox" value="true" name="Fri" checked> @DictExpressionBuilderSystem.Translate("Schedule.Fri")&nbsp;
            <input type="checkbox" value="true" name="Sut" checked> @DictExpressionBuilderSystem.Translate("Schedule.Sut")
        </div>
        <div style="margin: 0; padding: 0; height: 50px; width: 100%; float: right; border: solid silver thin;">
            <button><span class="glyphicon glyphicon-refresh" aria-hidden="true"></span></button>
            <button id="btnUpdateLines">@DictExpressionBuilderSystem.Translate("Schedule.UpdateLines")</button>
            Control: Refresh, Update LINES, Show PopupWindow with Cube
        </div>

        <div style="margin: 0; padding: 0; height: calc(100% - 150px); width: 100%; float: right; border: solid silver thin; overflow-x: hidden; overflow-y: auto;">
            <div class="content jqgrid-extended" id="dScheduleTable">
                <table id="grSchedule"></table>
                <div id="pgSchedule"></div>
            </div>
        </div>
    </div>
    <div style="margin: 0; padding: 0; height: 100%; width: 500px; float: left; border: solid silver thin; overflow: hidden;">
        <div style="margin: 0; padding: 0; height: 100%; width: 100%; float: right; border: solid silver thin; overflow-x: hidden; overflow-y: auto;">
            <div class="content jqgrid-extended" id="dLinesTable">
                <table id="grLines"></table>
                @*<div id="pgLines"></div>*@
            </div>
        </div>
    </div>
</div>

<div id="dlgUpdateLines" title="Update lines" hidden>
    <div class="content jqgrid-extended" id="dGeneratedScheduleTable">
        <table id="grGeneratedSchedule"></table>
        <div id="pgGeneratedSchedule"></div>
    </div>
</div>

@section scripts{
    @Scripts.Render("~/bundles/jqGridExtend")
    <script>
        $(function () {
            //var pagerID = "#pgLines";
            var linesGrid = $("#grLines"),
                dateFrom = $('#dateFrom'),
                dateTo = $('#dateTo');

            var printWindow = null;

            var scheduleGrid = $("#grSchedule");
            var scheduleGridExtend = new jqGridExtend(scheduleGrid);
            var schedulePagerID = "#pgSchedule";

            var generatedScheduleGrid = $("#grGeneratedSchedule");
            var generatedScheduleGridExtend = new jqGridExtend(generatedScheduleGrid);

            dateFrom.datepicker({
                regional: $.datepicker.regional["he"],
                dateFormat: 'mm/dd/yy',
                onSelect: function () {
                    scheduleGrid.jqGrid().trigger('reloadGrid');
                    this.focus();
                },
                onClose: function () { this.focus(); }
            })
                .datepicker('setDate', new Date())
                .on("input change", function (e) {
                    scheduleGrid.jqGrid().trigger('reloadGrid');
                });
            dateTo.datepicker({
                regional: $.datepicker.regional["he"],
                dateFormat: 'mm/dd/yy',
                onSelect: function () {
                    scheduleGrid.jqGrid().trigger('reloadGrid');
                    this.focus();
                },
                onClose: function () { this.focus(); }
            })
                .datepicker('setDate', 7)
                .on("input change", function (e) {
                    scheduleGrid.jqGrid().trigger('reloadGrid');
                });

            linesGrid.jqGrid({
                caption: '@DictExpressionBuilderSystem.Translate("Line.GridCaption")',
                url: '/api' + '@Url.Action("GetLines", "ScheduleApi")',
                datatype: "json",
                sortname: 'LineName',
                sortorder: "asc",
                altclass: "ui-state-default",
                height: "100%",
                viewrecords: true,
                loadonce: true,
                hidegrid: false,
                multiselect: true,
                rowNum: -1,
                colNames: [
                    '@DictExpressionBuilderSystem.Translate("Line.Id")',
                    '@DictExpressionBuilderSystem.Translate("Line.LineName")',
                    '@DictExpressionBuilderSystem.Translate("Line.LineNumber")',
                    '@DictExpressionBuilderSystem.Translate("Line.Direction")',
                    '@DictExpressionBuilderSystem.Translate("Line.IsActive")',
                ],
                colModel: [
                    { name: "Id", index: 'Id', key: true, hidden: false, width: 60, sortable: false, editable: false, edittype: "text", search: false },
                    { name: 'LineName', index: 'LineName', sorttype: "text", width: 110 },
                    { name: 'LineNumber', index: 'LineNumber', sorttype: "text", width: 110 },
                    {
                        name: 'Direction',
                        index: 'Direction',
                        sorttype: "select",
                        width: 110,
                        editable: false,
                        search: false,
                        edittype: 'select',
                        formatter: 'select',
                        editoptions: {
                            value: {
                                '@((int) LineDirection.Bouth)': '@DictExpressionBuilderSystem.Translate("General.Bouth")',
                                '@((int) LineDirection.To)': '@DictExpressionBuilderSystem.Translate("General.To")',
                                '@((int) LineDirection.From)': '@DictExpressionBuilderSystem.Translate("General.From")'
                            }
                        }
                    },
                    { name: 'IsActive', index: 'IsActive', sorttype: "text", width: 90, editable: true, edittype: "checkbox", editoptions: { value: "True:False" }, align: 'center', formatter: 'checkbox', search: false },
                ],
                onSelectRow: function (id) {
                    scheduleGrid.jqGrid().trigger('reloadGrid');
                }
            })


            // ---------------------- Schedule grid ----------------------------

            var lineActionsFormatter = function (cellvalue, options, rowObject) {
                var res = "";
                res += '<div style="margin-left: 8px;">';
                res += '    <div title="@DictExpressionBuilderSystem.Translate("grid.EditSelectedRow")" style="float: left; cursor: pointer;" class="ui-pg-div ui-inline-edit" id="jEditButton_' + options.rowId + '" onclick="$.fn.rowActionsExtended.call(this, \'edit\');" onmouseover="jQuery(this).addClass(\'ui-state-hover\');" onmouseout="jQuery(this).removeClass(\'ui-state-hover\');"><span class="glyphicon glyphicon-pencil"></span></div>';
                res += '    <div title="@DictExpressionBuilderSystem.Translate("grid.DeleteSelectedRow")" style="float: left;" class="ui-pg-div ui-inline-del" id="jDeleteButton_' + options.rowId + '" onclick="$.fn.rowActionsExtended.call(this, \'del\');" onmouseover="jQuery(this).addClass(\'ui-state-hover\');" onmouseout="jQuery(this).removeClass(\'ui-state-hover\');"><span class="glyphicon glyphicon-trash"></span></div>';
                res += '    <div title="@DictExpressionBuilderSystem.Translate("grid.SaveRow")" style="float: left; display: none" class="ui-pg-div ui-inline-save" id="jSaveButton_' + options.rowId + '" onclick="$.fn.rowActionsExtended.call(this, \'save\');" onmouseover="jQuery(this).addClass(\'ui-state-hover\');" onmouseout="jQuery(this).removeClass(\'ui-state-hover\');"><span class="glyphicon glyphicon-floppy-disk"></span></div>';
                res += '    <div title="@DictExpressionBuilderSystem.Translate("grid.CancelRowEditing")" style="float: left; display: none;" class="ui-pg-div ui-inline-cancel" id="jCancelButton_' + options.rowId + '" onclick="$.fn.rowActionsExtended.call(this, \'cancel\');" onmouseover="jQuery(this).addClass(\'ui-state-hover\');" onmouseout="jQuery(this).removeClass(\'ui-state-hover\');"><span class="glyphicon glyphicon-ban-circle"></span></div>';
                res += '</div>';
                return res;
            };

            var commonScheduleGridParams = {
                    caption: "@DictExpressionBuilderSystem.Translate("Schedule.GridCaption")",
                    postData: getScheduleGridParams(),
                    loadonce: false,
                    height: "100%",
                    autowidth: true,
                    regional: "il",
                    hidegrid: false,
                    //multiselect: false,
                    mtype: "get",
                    viewrecords: true,
                    ignoreCase: true,
                    loadui: "disable",
                    altRows: false,
                    sortable: true,
                    altclass: "ui-state-default",
                    sortname: 'Id',
                    sortorder: "asc",
                    colNames: [
                        '@DictExpressionBuilderSystem.Translate("Schedule.Id")',
                        '@DictExpressionBuilderSystem.Translate("Schedule.Date")',
                        '@DictExpressionBuilderSystem.Translate("Schedule.Direction")',
                        '@DictExpressionBuilderSystem.Translate("Schedule.LineIdDescription")',
                        '@DictExpressionBuilderSystem.Translate("Schedule.LineId")',
                        '@DictExpressionBuilderSystem.Translate("Schedule.DriverIdDescription")',
                        '@DictExpressionBuilderSystem.Translate("Schedule.DriverId")',
                        '@DictExpressionBuilderSystem.Translate("Schedule.BusIdDescription")',
                        '@DictExpressionBuilderSystem.Translate("Schedule.BusId")',
                        '@DictExpressionBuilderSystem.Translate("Schedule.leaveTime")',
                        '@DictExpressionBuilderSystem.Translate("Schedule.arriveTime")',
                        ""
                    ],
                    colModel: [
                        { name: "Id", index: 'Id', key: true, hidden: true, sortable: false, editable: false, edittype: "text", search: false },
                        { name: 'Date', index: 'Date', width: 80, align: 'left', sortable: true, formatter: 'text', formatoptions: { srcformat: 'ISO8601Long', newformat: 'm/d/Y', defaultValue: "" }, editable: true, edittype: 'text', editoptions: { size: 12, maxlengh: 12, dataInit: function (element) { $(element).datepicker({ regional: $.datepicker.regional["he"], dateFormat: 'mm/dd/yy', onSelect: function () { this.focus(); }, onClose: function () { this.focus(); } }); } }, editrules: { custom: true, custom_func: datecheck }, search: false },
                        {
                            name: 'Direction',
                            index: 'Direction',
                            sorttype: "select",
                            width: 110,
                            editable: true,
                            search: false,
                            edittype: 'select',
                            formatter: 'select',
                            editoptions: {
                                value: {
                                    '@((int) LineDirection.Bouth)': '@DictExpressionBuilderSystem.Translate("General.Bouth")',
                                    '@((int) LineDirection.To)': '@DictExpressionBuilderSystem.Translate("General.To")',
                                    '@((int) LineDirection.From)': '@DictExpressionBuilderSystem.Translate("General.From")'
                                }
                            }
                        },
                        { name: 'LineIdDescription', index: 'LineIdDescription', hidden: true, sortable: false, editable: false, edittype: "text", search: false },
                        {
                            name: 'LineId',
                            index: 'LineId',
                            sorttype: "text",
                            search: false,
                            editable: true,
                            edittype: "select",
                            editoptions: {
                                dataUrl: '/api' + '@Url.Action("GetScheduleLines", "ScheduleApi")',
                                dataInit: function (elem) {
                                    var lineIdSelect = $(elem);
                                    lineIdSelect.width('94%'); // set the width for dropdown
                                    lineIdSelect.on('change', function (e) {
                                        var lineId = this.value;
                                        $.ajax({
                                            url: '/api' + '@Url.Action("GetAvailableBuses", "ScheduleApi")',
                                            data: { lineId: lineId },
                                            type: 'GET',
                                            dataType: 'json',
                                            contentType: 'application/json; charset=utf-8',
                                            success: function (data) {
                                                var busesOptions = buildBusesOptions(data);
                                                lineIdSelect.parent().closest('tr.jqgrow, table').find('select[name=BusId]').html(busesOptions);
                                            }
                                        });
                                    });
                                },
                                buildSelect: function (data) {
                                    var response = jQuery.parseJSON(data);
                                    var s = '<select>';
                                    if (response && response.Data.length) {
                                        for (var i = 0, l = response.Data.length; i < l; i++) {
                                            var ri = response.Data[i];
                                            s += '<option value="' + ri.Value + '" title="' + ri.Title + '">' + ri.Text + '</option>';
                                        }
                                    }
                                    return s + "</select>";
                                },
                            },
                        },
                        { name: 'DriverIdDescription', index: 'DriverIdDescription', hidden: true, sortable: false, editable: false, edittype: "text", search: false },
                        {
                            name: 'DriverId',
                            index: 'DriverId',
                            sorttype: "text",
                            search: false,
                            editable: true,
                            edittype: "select",
                            editoptions: {
                                dataUrl: '/api' + '@Url.Action("GetScheduleDrivers", "ScheduleApi")',
                                dataInit: function (elem) {
                                    $(elem).width('94%'); // set the width for dropdown
                                },
                                postData: function (rowid, value, cmName) {
                                    return {
                                        lineId: rowid
                                    }
                                },
                                buildSelect: function (data) {
                                    var response = jQuery.parseJSON(data);
                                    var s = '<select>';
                                    if (response && response.Data.length) {
                                        for (var i = 0, l = response.Data.length; i < l; i++) {
                                            var ri = response.Data[i];
                                            s += '<option value="' + ri.Value + '" title="' + ri.Title + '">' + ri.Text + '</option>';
                                        }
                                    }
                                    return s + "</select>";
                                },
                            },
                        },
                        { name: 'BusIdDescription', index: 'BusIdDescription', hidden: true, sortable: false, editable: false, edittype: "text", search: false },
                        {
                            name: 'BusId',
                            index: 'BusId',
                            sorttype: "text",
                            search: false,
                            editable: true,
                            edittype: "select",
                            editoptions: {
                                dataUrl: '/api' + '@Url.Action("GetAvailableBuses", "ScheduleApi")',
                                dataInit: function (elem) {
                                    $(elem).width('94%'); // set the width for dropdown
                                },
                                postData: function (rowid, value, cmName) {
                                    return {
                                        scheduleId: rowid
                                    }
                                },
                                buildSelect: function (data) {
                                    var response = jQuery.parseJSON(data);
                                    return '<select>' + buildBusesOptions(response) + '</select>';
                                },
                            },
                        },
                        { name: 'leaveTime', index: 'leaveTime', width: 80, align: 'left', sortable: true, formatter: 'text', formatoptions: { srcformat: 'ISO8601Long', newformat: 'hh:mm', defaultValue: "" }, editable: true, edittype: 'text', editoptions: { size: 12, maxlengh: 12, dataInit: function (element) { $(element).timepicker({ onSelect: function () { this.focus(); }, onClose: function () { this.focus(); } }); } }, editrules: { custom: true, custom_func: timecheck }, search: false },
                        { name: 'arriveTime', index: 'arriveTime', width: 80, align: 'left', sortable: true, formatter: 'text', formatoptions: { srcformat: 'ISO8601Long', newformat: 'hh:mm', defaultValue: "" }, editable: true, edittype: 'text', editoptions: { size: 12, maxlengh: 12, dataInit: function (element) { $(element).timepicker({ onSelect: function () { this.focus(); }, onClose: function () { this.focus(); } }); } }, editrules: { custom: true, custom_func: timecheck }, search: false },
                        {
                            name: 'ActionsBtn',
                            index: 'ActionsBtn',
                            width: 80,
                            align: 'center',
                            search: false,
                            formatter: lineActionsFormatter,
                        },
                    ],
                    saveAfterSelect: true
            }

            scheduleGrid.jqGrid($.extend({}, commonScheduleGridParams, {
                url: '/api' + '@Url.Action("GetSchedule", "ScheduleApi")',
                datatype: "json",
                pager: schedulePagerID,
                rowNum: 25,
                rowList: [5, 25, 50, 100],
                beforeSelectRow: function (rowid) {
                    scheduleGridExtend.restore(rowid);
                    return false;
                },
                ondblClickRow: function (rowid, iRow, iCol) {
                    scheduleGridExtend.editRow(rowid);
                },
                loadComplete: function (data) {
                    scheduleGridExtend.populateDescription(data);
                },
                editurl: '/api' + '@Url.Action("EditItem", "ScheduleApi")',
                reloadAfterSubmit: true,
            }))
                .navGrid(schedulePagerID, {
                    edit: false,
                    add: true,
                    addtitle: "@DictExpressionBuilderSystem.Translate("grid.CreateNewRow")",
                    del: false,
                    deltitle: "@DictExpressionBuilderSystem.Translate("grid.DeleteRow")",
                    refresh: true,
                    refreshtitle: "@DictExpressionBuilderSystem.Translate("grid.Reload")",
                    search: false,
                    view: false,
                    closeAfterAdd: true,
                    closeAfterEdit: true,
                    reloadAfterSubmit: true,
                }
                )
                @*.navButtonAdd(schedulePagerID, {
                    id: "print",
                    buttonicon: "ui-icon-print",
                    caption: "",
                    title: "@DictExpressionBuilderSystem.Translate("grid.Print")",
                    onClickButton: function () {
                        var postData = grid.jqGrid('getGridParam', 'postData');
                        var urlGetExcel = '/api' + "@Url.Action("GetPrint", "LinesApi")";
                        var url = urlGetExcel + "?" + $.param(postData);
                        if (printWindow == null || printWindow.closed) {
                            printWindow = window.open('', '', 'height=' + $(window).height() + ',width=' + $(window).width());
                        } else {
                            printWindow.focus();
                        }
                        $.ajax({
                            url: url,
                            type: 'GET',
                            dataType: 'json',
                            contentType: 'application/json; charset=utf-8',
                            success: function (data) {
                                if (printWindow != undefined) {
                                    $("#grPrintLines").jqGrid({
                                        datatype: "local",
                                        data: data,
                                        colNames: [
                                            '@DictExpressionBuilderSystem.Translate("Line.LineName")',
                                            '@DictExpressionBuilderSystem.Translate("Line.LineNumber")',
                                            '@DictExpressionBuilderSystem.Translate("Line.Direction")',
                                            '@DictExpressionBuilderSystem.Translate("Line.IsActive")',
                                            '@DictExpressionBuilderSystem.Translate("Line.totalStudents")',
                                            '@DictExpressionBuilderSystem.Translate("Line.Duration")',
                                            '@DictExpressionBuilderSystem.Translate("Line.Sun")',
                                            '@DictExpressionBuilderSystem.Translate("Line.Mon")',
                                            '@DictExpressionBuilderSystem.Translate("Line.Tue")',
                                            '@DictExpressionBuilderSystem.Translate("Line.Wed")',
                                            '@DictExpressionBuilderSystem.Translate("Line.Thu")',
                                            '@DictExpressionBuilderSystem.Translate("Line.Fri")',
                                            '@DictExpressionBuilderSystem.Translate("Line.Sut")',
                                            '@DictExpressionBuilderSystem.Translate("Bus.BusIdDescription")',
                                            '@DictExpressionBuilderSystem.Translate("Bus.PlateNumber")',
                                            '@DictExpressionBuilderSystem.Translate("BusCompany.Name")',
                                            '@DictExpressionBuilderSystem.Translate("Bus.seats")',
                                        ],
                                        colModel: [
                                            { name: "LineName" },
                                            { name: "LineNumber" },
                                            { name: "Direction" },
                                            { name: "IsActive" },
                                            { name: "totalStudents" },
                                            { name: "Duration" },
                                            { name: "Sun" },
                                            { name: "Mon" },
                                            { name: "Tue" },
                                            { name: "Wed" },
                                            { name: "Thu" },
                                            { name: "Fri" },
                                            { name: "Sut" },
                                            { name: "BusIdDescription" },
                                            { name: "PlateNumber" },
                                            { name: "BusCompanyName" },
                                            { name: "seats" },
                                        ],
                                        height: "auto",
                                    });
                                    printWindow.document.clear();
                                    printWindow.document.write('<html><head><title>@DictExpressionBuilderSystem.Translate("Line.GridCaption")</title>');
                                    //printWindow.document.write('<style type=\"text/css\"> table th, table td { border:1px solid #000; padding:0; margin:0; } </style>');
                                    printWindow.document.write('</head><body >');
                                    printWindow.document.write('<div class="page">');
                                    printWindow.document.write('<div class="subpage">');
                                    printWindow.document.write($("#printLinesGrid").html());
                                    printWindow.document.write('</div>');
                                    printWindow.document.write('</div>');
                                    printWindow.document.write('</body></html>');
                                    printWindow.document.close();
                                    printWindow.print();
                                }
                            }
                        });

                    }
                }
                )*@
                @*.navButtonAdd(schedulePagerID, {
                    id: "toExcel",
                    buttonicon: "ui-icon-disk",
                    caption: "",
                    title: "@DictExpressionBuilderSystem.Translate("grid.ToExcel")",
                    onClickButton: function () {
                        var postData = grid.jqGrid('getGridParam', 'postData');
                        var urlGetExcel = '/api' + "@Url.Action("GetExcel", "LinesApi")";
                        var url = urlGetExcel + "?" + $.param(postData);
                        window.location.href = url;
                    }
                }
                )*@
                .filterToolbar({
                    stringResult: true,
                    enableClear: false
                }
                );

            scheduleGridExtend.init();


            // ---------------------------- Generated Schedule grid -------------------------

            generatedScheduleGrid.jqGrid($.extend({}, commonScheduleGridParams, {
                url: '/api' + '@Url.Action("GenerateSchedule", "ScheduleApi")',
                datatype: "local",
                beforeSelectRow: function (rowid) {
                    generatedScheduleGridExtend.restore(rowid);
                    return false;
                },
                ondblClickRow: function (rowid, iRow, iCol) {
                    generatedScheduleGridExtend.editRow(rowid);
                },
                loadComplete: function (data) {
                    generatedScheduleGridExtend.populateDescription(data);
                },
                editurl: 'clientArray',
                reloadAfterSubmit: false,
            }))
            .filterToolbar({
                stringResult: true,
                enableClear: false
            });

            generatedScheduleGridExtend.init();

            function buildBusesOptions(data) {
                var s = '';
                if (data && data.Data.length) {
                    for (var i = 0, l = data.Data.length; i < l; i++) {
                        var ri = data.Data[i];
                        s += '<option value="' + ri.Value + '" title="' + ri.Title + '"' + (ri.Selected ? 'selected="selected"' : '') + '>' + ri.Text + '</option>';
                    }
                }
                return s;
            }

            function datecheck(value, colname) {
                if (value) {
                    var pattern = "(0[1-9]|1[012])(/)(0[1-9]|[12][0-9]|3[01])(/)(19|20)\\d\\d";
                    var regCheck = new RegExp(pattern);
                    if (!regCheck.test(value)) {
                        return [false, "@DictExpressionBuilderSystem.Translate("grid.NotValidDate")" + " " + colname + ":" + value];
                    }
                }
                return [true, ""];
            }

            function timecheck(value, colname) {
                if (value) {
                    var pattern = "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$";
                    var regCheck = new RegExp(pattern);
                    if (!regCheck.test(value)) {
                        return [false, "@DictExpressionBuilderSystem.Translate("grid.NotValidDate")" + " " + colname + ":" + value];
                    }
                }
                return [true, ""];
            }

            function getScheduleGridParams() {
                return {
                    LinesIds: function () { return linesGrid.jqGrid('getGridParam', 'selarrrow').join(); },
                    DateFrom: function () { return dateFrom.val() },
                    DateTo: function () { return dateTo.val() },
                    ArriveTime: function () { return $('[name=ArriveTime]').val() },
                    LeaveTime: function () { return $('[name=LeaveTime]').val() },
                    Sun: function () { return $('[name=Sun]').val() },
                    Mon: function () { return $('[name=Mon]').val() },
                    Tue: function () { return $('[name=Tue]').val() },
                    Wed: function () { return $('[name=Wed]').val() },
                    Thu: function () { return $('[name=Thu]').val() },
                    Fri: function () { return $('[name=Fri]').val() },
                    Sut: function () { return $('[name=Sut]').val() }
                }
            }

            $("#dlgUpdateLines").dialog({
                autoOpen: false,
                width: 920,
                modal: true
            });
            $('#btnUpdateLines').on('click', function () {
                $("#dlgUpdateLines").dialog("open");
                generatedScheduleGrid.jqGrid('setGridParam', { datatype: 'json' }).trigger('reloadGrid');
            });

            // ---------------------------- Generated Schedule grid -------------------------

            @*var generatedScheduleGrid = $("#grGeneratedSchedule");
            var scheduleGridExtend = Object.assign({}, jqGridExtend);
            scheduleGridExtend.setGrid(scheduleGrid);
            var schedulePagerID = "#pgSchedule";

            scheduleGrid.jqGrid({
                    caption: "@DictExpressionBuilderSystem.Translate("Schedule.GridCaption")",
                    url: '/api' + '@Url.Action("GetSchedule", "ScheduleApi")',
                    datatype: "json",
                    loadonce: false,
                    reloadAfterSubmit: true,
                    height: "100%",
                    autowidth: true,
                    regional: "il",
                    hidegrid: false,
                    multiselect: false,
                    pager: schedulePagerID,
                    mtype: "get",
                    rowNum: 25,
                    rowList: [5, 25, 50, 100],
                    viewrecords: true,
                    ignoreCase: true,
                    loadui: "disable",
                    altRows: false,
                    sortable: true,
                    altclass: "ui-state-default",
                    editurl: '/api' + '@Url.Action("EditItem", "ScheduleApi")',
                    sortname: 'Id',
                    sortorder: "asc",
                    colNames: [
                        '@DictExpressionBuilderSystem.Translate("Schedule.Id")',
                        '@DictExpressionBuilderSystem.Translate("Schedule.Date")',
                        '@DictExpressionBuilderSystem.Translate("Schedule.Direction")',
                        '@DictExpressionBuilderSystem.Translate("Schedule.LineIdDescription")',
                        '@DictExpressionBuilderSystem.Translate("Schedule.LineId")',
                        '@DictExpressionBuilderSystem.Translate("Schedule.DriverIdDescription")',
                        '@DictExpressionBuilderSystem.Translate("Schedule.DriverId")',
                        '@DictExpressionBuilderSystem.Translate("Schedule.BusId")',
                        '@DictExpressionBuilderSystem.Translate("Schedule.leaveTime")',
                        '@DictExpressionBuilderSystem.Translate("Schedule.arriveTime")',
                        ""
                    ],
                    colModel: [
                        { name: "Id", index: 'Id', key: true, hidden: true, sortable: false, editable: false, edittype: "text", search: false },
                        { name: 'Date', index: 'Date', width: 80, align: 'left', sortable: true, formatter: 'text', formatoptions: { srcformat: 'ISO8601Long', newformat: 'm/d/Y', defaultValue: "" }, editable: true, edittype: 'text', editoptions: { size: 12, maxlengh: 12, dataInit: function(element) { $(element).datepicker({ regional: $.datepicker.regional["he"], dateFormat: 'mm/dd/yy', onSelect: function() { this.focus(); }, onClose: function() { this.focus(); } }); } }, editrules: { custom: true, custom_func: datecheck }, search: false },
                        {
                            name: 'Direction',
                            index: 'Direction',
                            sorttype: "select",
                            width: 110,
                            editable: true,
                            search: false,
                            edittype: 'select',
                            formatter: 'select',
                            editoptions: {
                                value: {
                                    '@((int)LineDirection.Bouth)': '@DictExpressionBuilderSystem.Translate("General.Bouth")',
                                    '@((int)LineDirection.To)': '@DictExpressionBuilderSystem.Translate("General.To")',
                                    '@((int)LineDirection.From)': '@DictExpressionBuilderSystem.Translate("General.From")'
                                }
                            }
                        },
                        { name: 'LineIdDescription', index: 'LineIdDescription', hidden: true, sortable: false, editable: false, edittype: "text", search: false },
                        {
                            name: 'LineId',
                            index: 'LineId',
                            sorttype: "text",
                            search: false,
                            editable: true,
                            edittype: "select",
                            editoptions: {
                                dataUrl: '/api' + '@Url.Action("GetScheduleLines", "ScheduleApi")',
                                dataInit: function(elem) {
                                    $(elem).width('94%'); // set the width for dropdown
                                },
                                postData: function(rowid, value, cmName) {
                                    return {
                                        lineId: rowid
                                    }
                                },
                                buildSelect: function(data) {
                                    var response = jQuery.parseJSON(data);
                                    var s = '<select>';
                                    if (response && response.Data.length) {
                                        for (var i = 0, l = response.Data.length; i < l; i++) {
                                            var ri = response.Data[i];
                                            s += '<option value="' + ri.Value + '" title="' + ri.Title + '">' + ri.Text + '</option>';
                                        }
                                    }
                                    return s + "</select>";
                                },
                            },
                        },
                        { name: 'DriverIdDescription', index: 'DriverIdDescription', hidden: true, sortable: false, editable: false, edittype: "text", search: false },
                        {
                            name: 'DriverId',
                            index: 'DriverId',
                            sorttype: "text",
                            search: false,
                            editable: true,
                            edittype: "select",
                            editoptions: {
                                dataUrl: '/api' + '@Url.Action("GetScheduleDrivers", "ScheduleApi")',
                                dataInit: function(elem) {
                                    $(elem).width('94%'); // set the width for dropdown
                                },
                                postData: function(rowid, value, cmName) {
                                    return {
                                        lineId: rowid
                                    }
                                },
                                buildSelect: function(data) {
                                    var response = jQuery.parseJSON(data);
                                    var s = '<select>';
                                    if (response && response.Data.length) {
                                        for (var i = 0, l = response.Data.length; i < l; i++) {
                                            var ri = response.Data[i];
                                            s += '<option value="' + ri.Value + '" title="' + ri.Title + '">' + ri.Text + '</option>';
                                        }
                                    }
                                    return s + "</select>";
                                },
                            },
                        },
                        { name: 'BusId', index: 'BusId', sorttype: "text", width: 110, editable: true, search: false },
                        { name: 'leaveTime', index: 'leaveTime', width: 80, align: 'left', sortable: true, formatter: 'text', formatoptions: { srcformat: 'ISO8601Long', newformat: 'hh:mm', defaultValue: "" }, editable: true, edittype: 'text', editoptions: { size: 12, maxlengh: 12, dataInit: function(element) { $(element).timepicker({ onSelect: function() { this.focus(); }, onClose: function() { this.focus(); } }); } }, editrules: { custom: true, custom_func: timecheck }, search: false },
                        { name: 'arriveTime', index: 'arriveTime', width: 80, align: 'left', sortable: true, formatter: 'text', formatoptions: { srcformat: 'ISO8601Long', newformat: 'hh:mm', defaultValue: "" }, editable: true, edittype: 'text', editoptions: { size: 12, maxlengh: 12, dataInit: function(element) { $(element).timepicker({ onSelect: function() { this.focus(); }, onClose: function() { this.focus(); } }); } }, editrules: { custom: true, custom_func: timecheck }, search: false },
                        {
                            name: 'ActionsBtn',
                            index: 'ActionsBtn',
                            width: 80,
                            align: 'center',
                            search: false,
                            formatter: lineActionsFormatter,
                        },
                    ],
                    saveAfterSelect: true,
                    beforeSelectRow: function(rowid) {
                        scheduleGridExtend.restore(rowid);
                        return false;
                    },
                    ondblClickRow: function(rowid, iRow, iCol) {
                        scheduleGridExtend.editRow(rowid);
                    },
                    loadComplete: function(data) {
                        scheduleGridExtend.populateDescription(data);
                    }
                })
                .navGrid(schedulePagerID, {
                        edit: false,
                        add: true,
                        addtitle: "@DictExpressionBuilderSystem.Translate("grid.CreateNewRow")",
                        del: false,
                        deltitle: "@DictExpressionBuilderSystem.Translate("grid.DeleteRow")",
                        refresh: true,
                        refreshtitle: "@DictExpressionBuilderSystem.Translate("grid.Reload")",
                        search: false,
                        view: false,
                        closeAfterAdd: true,
                        closeAfterEdit: true,
                        reloadAfterSubmit: true,
                    }
                )
                .filterToolbar({
                        stringResult: true,
                        enableClear: false
                    }
                );

            scheduleGridExtend.init();*@
        });
    </script>
}