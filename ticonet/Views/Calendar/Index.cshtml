@using System.Web.Optimization
@using Business_Logic

<div class="content inline-block" style="height: calc(100% - 30px); width: 100%; display: inline-block; margin: 20px 0 0 0; padding: 0;">
    <div id="calendar-datepicker"></div>
    <div class="content jqgrid-extended" id="dCalendarTable">
        <table id="grCalendar"></table>
        <div id="pgCalendar"></div>
    </div>

    <!--Div for render grid for Print-->
    <div hidden id="printCalendarGrid"><table id="grPrintCalendar"></table></div>
</div>

@section scripts{
    @Scripts.Render("~/bundles/jqGridExtend")
    <script>

        $(function () {
            var lineActionsFormatter = function (cellvalue, options, rowObject) {
                var res = "";
                res += '<div style="margin-left: 8px;">';
                res += '    <div title="@DictExpressionBuilderSystem.Translate("grid.EditSelectedRow")" style="float: left; cursor: pointer;" class="ui-pg-div ui-inline-edit" id="jEditButton_' + options.rowId + '" onclick="$.fn.rowActionsExtended.call(this, \'edit\');" onmouseover="jQuery(this).addClass(\'ui-state-hover\');" onmouseout="jQuery(this).removeClass(\'ui-state-hover\');"><span class="glyphicon glyphicon-pencil"></span></div>';
                @*res += '    <div title="@DictExpressionBuilderSystem.Translate("grid.DeleteSelectedRow")" style="float: left;" class="ui-pg-div ui-inline-del" id="jDeleteButton_' + options.rowId + '" onclick="$.fn.rowActionsExtended.call(this, \'del\');" onmouseover="jQuery(this).addClass(\'ui-state-hover\');" onmouseout="jQuery(this).removeClass(\'ui-state-hover\');"><span class="glyphicon glyphicon-trash"></span></div>';*@
                res += '    <div title="@DictExpressionBuilderSystem.Translate("grid.SaveRow")" style="float: left; display: none" class="ui-pg-div ui-inline-save" id="jSaveButton_' + options.rowId + '" onclick="$.fn.rowActionsExtended.call(this, \'save\');" onmouseover="jQuery(this).addClass(\'ui-state-hover\');" onmouseout="jQuery(this).removeClass(\'ui-state-hover\');"><span class="glyphicon glyphicon-floppy-disk"></span></div>';
                res += '    <div title="@DictExpressionBuilderSystem.Translate("grid.CancelRowEditing")" style="float: left; display: none;" class="ui-pg-div ui-inline-cancel" id="jCancelButton_' + options.rowId + '" onclick="$.fn.rowActionsExtended.call(this, \'cancel\');" onmouseover="jQuery(this).addClass(\'ui-state-hover\');" onmouseout="jQuery(this).removeClass(\'ui-state-hover\');"><span class="glyphicon glyphicon-ban-circle"></span></div>';
                res += '</div>';
                return res;
            };

            var printWindow = null;
            var grid = $("#grCalendar");
            var gridExtend = Object.assign({}, jqGridExtend);
            gridExtend.fn.setGrid(grid);
            var pagerID = "#pgCalendar";
            var calendarHighlitedDays;

            grid.jqGrid({
                caption: "@DictExpressionBuilderSystem.Translate("Calendar.GridCaption")",
                url: '/api' + '@Url.Action("GetEvents", "CalendarApi")',
                datatype: "json",
                loadonce: false,
                height: "100%",
                autowidth: true,
                regional: "il",
                hidegrid: false,
                multiselect: false,
                pager: pagerID,
                mtype: "get",
                rowNum: 25,
                rowList: [5, 25, 50, 100],
                viewrecords: true,
                ignoreCase: true,
                loadui: "disable",
                altRows: false,
                sortable: true,
                altclass: "ui-state-default",
                editurl: '/api' + '@Url.Action("EditEvent", "CalendarApi")',
                sortname: 'date',
                sortorder: "asc",
                colNames: [
                    '@DictExpressionBuilderSystem.Translate("Event.Id")',
                    '@DictExpressionBuilderSystem.Translate("Event.date")',
                    '@DictExpressionBuilderSystem.Translate("Event.month")',
                    '@DictExpressionBuilderSystem.Translate("Event.HebMonth")',
                    '@DictExpressionBuilderSystem.Translate("Event.day")',
                    '@DictExpressionBuilderSystem.Translate("Event.active")',
                    '@DictExpressionBuilderSystem.Translate("Event.event")',
                    ""
                ],
                colModel: [
                    { name: "pk", index: 'pk', key: true, hidden: true, sortable: false, editable: false, edittype: "text", search: false },
                    //{ name: 'date', index: 'date', width: 80, align: 'left', sortable: true, formatter: 'text', editable: false, edittype: 'text', formatoptions: { defaultValue: "" }, editoptions: { defaultValue: "", size: 12, maxlengh: 12, dataInit: function (element) { $(element).datepicker({ dateFormat: 'mm/dd/yy', onSelect: function () { this.focus(); }, onClose: function () { this.focus(); } }); } }, editrules: { custom: true, custom_func: datecheck }, search: false },
                    { name: 'date', index: 'date', sorttype: "text", width: 90, editable: false, search: false },
                    { name: 'month', index: 'month', sorttype: "text", width: 90, editable: false},
                    { name: 'HebMonth', index: 'HebMonth', sorttype: "text", width: 90, editable: false },
                    { name: 'day', index: 'day', sorttype: "text", width: 90, editable: false },
                    { name: 'active', index: 'active', sorttype: "text", width: 90, editable: true, edittype: "checkbox", editoptions: { value: "True:False" }, align: 'center', formatter: 'checkbox', search: false },
                    { name: 'calendarEvent', index: 'calendarEvent', sorttype: "text", width: 90, editable: true },

                    {
                        name: 'ActionsBtn',
                        index: 'ActionsBtn',
                        width: 80,
                        align: 'center',
                        search: false,
                        formatter: lineActionsFormatter,
                    },
                ],
                saveAfterSelect: true,
                beforeSelectRow: function (rowid) {
                    gridExtend.fn.restore(rowid);
                    return false;
                },
                ondblClickRow: function (rowid, iRow, iCol) {
                    gridExtend.fn.editRow(rowid);
                },
                loadComplete: function (data) {
                    gridExtend.fn.populateDescription(data);
                }
            })
                .navGrid(pagerID, {
                    edit: false,
                    add: false,
                    addtitle: "@DictExpressionBuilderSystem.Translate("grid.CreateNewRow")",
                    del: false,
                    deltitle: "@DictExpressionBuilderSystem.Translate("grid.DeleteRow")",
                    refresh: true,
                    refreshtitle: "@DictExpressionBuilderSystem.Translate("grid.Reload")",
                    search: false,
                    view: false,
                    closeAfterAdd: true,
                    closeAfterEdit: true,
                    reloadAfterSubmit: true,
                }
                )
                .navButtonAdd(pagerID, {
                    id: "print",
                    buttonicon: "ui-icon-print",
                    caption: "",
                    title: "@DictExpressionBuilderSystem.Translate("grid.Print")",
                    onClickButton: function () {
                        var postData = grid.jqGrid('getGridParam', 'postData');
                        var urlGetExcel = '/api' + "@Url.Action("GetPrint", "CalendarApi")";
                        var url = urlGetExcel + "?" + $.param(postData);
                        if (printWindow == null || printWindow.closed) {
                            printWindow = window.open('', '', 'height=' + $(window).height() + ',width=' + $(window).width());
                        } else {
                            printWindow.focus();
                        }
                        $.ajax({
                            url: url,
                            type: 'GET',
                            dataType: 'json',
                            contentType: 'application/json; charset=utf-8',
                            success: function (data) {
                                if (printWindow != undefined) {
                                    $("#grPrintCalendar").jqGrid({
                                        datatype: "local",
                                        data: data,
                                        height: "auto",
                                        autowidth: true,
                                        colNames: [
                                            '@DictExpressionBuilderSystem.Translate("Event.date")',
                                            '@DictExpressionBuilderSystem.Translate("Event.month")',
                                            '@DictExpressionBuilderSystem.Translate("Event.HebMonth")',
                                            '@DictExpressionBuilderSystem.Translate("Event.day")',
                                            '@DictExpressionBuilderSystem.Translate("Event.active")',
                                            '@DictExpressionBuilderSystem.Translate("Event.event")',
                                        ],
                                        colModel: [
                                            { name: "date" },
                                            { name: "month" },
                                            { name: "HebMonth" },
                                            { name: "day" },
                                            { name: "active" },
                                            { name: "calendarEvent" },
                                        ],
                                        @*caption: "@DictExpressionBuilderSystem.Translate("Bus.GridCaption")"*@
                                    });
                                    printWindow.document.clear();
                                    printWindow.document.write('<html><head><title>@DictExpressionBuilderSystem.Translate("Calendar.GridCaption")</title>');
                                    //printWindow.document.write('<style type=\"text/css\"> table th, table td { border:1px solid #000; padding:0; margin:0; } </style>');
                                    printWindow.document.write('</head><body >');
                                    printWindow.document.write('<div class="page">');
                                    printWindow.document.write('<div class="subpage">');
                                    printWindow.document.write($("#printCalendarGrid").html());
                                    printWindow.document.write('</div>');
                                    printWindow.document.write('</div>');
                                    printWindow.document.write('</body></html>');
                                    printWindow.document.close();
                                    printWindow.print();
                                }
                            }
                        });

                    }
                }
                )
                .navButtonAdd(pagerID, {
                    id: "toExcel",
                    buttonicon: "ui-icon-disk",
                    caption: "",
                    title: "@DictExpressionBuilderSystem.Translate("grid.ToExcel")",
                    onClickButton: function () {
                        var postData = grid.jqGrid('getGridParam', 'postData');
                        var urlGetExcel = '/api' + "@Url.Action("GetExcel", "CalendarApi")";
                        var url = urlGetExcel + "?" + $.param(postData);
                        window.location.href = url;
                    }
                }
                )
                .filterToolbar({
                    stringResult: true,
                    enableClear: false
                }
                );

            gridExtend.fn.init();

            function datecheck(value, colname) {
                if (value) {
                    var pattern = "(0[1-9]|1[012])(/)(0[1-9]|[12][0-9]|3[01])(/)(19|20)\\d\\d";
                    var regCheck = new RegExp(pattern);
                    if (!regCheck.test(value)) {
                        return [false, "@DictExpressionBuilderSystem.Translate("grid.NotValidDate")" + " " + colname + ":" + value];
                    }
                }
                return [true, ""];
            }
            

            $("#calendar-datepicker").datepicker({
                regional: $.datepicker.regional["he"],
                dateFormat: 'mm/dd/yy',
                onSelect: function (dateText, inst) {
                    grid.setGridParam({
                        postData: { filters: '{"groupOp":"AND","rules":[{"field":"date","op":"eq","data":"' + dateText + '"}]}' },
                        search:true
                    }).trigger('reloadGrid');
                },
                onChangeMonthYear: function (year, month, widget) {
                    calendarHighlitedDays = null;
                    highlightEvens(month, year);
                },
                beforeShowDay: function (date) {
                    if (calendarHighlitedDays != null && calendarHighlitedDays.includes(date.getDate())) {
                        return [true, 'ui-state-highlight'];
                    }
                    return [true, ''];
                }
            });

            highlightEvens($('#calendar-datepicker').datepicker('getDate').getMonth() + 1, $('#calendar-datepicker').datepicker('getDate').getFullYear());

            function highlightEvens(month, year) {
                $.ajax({
                    url: '/api' + '@Url.Action("GetDaysWithEvents", "CalendarApi")',
                    type: 'GET',
                    data: 'month=' + month + '&year=' + year,
                    dataType: 'json',
                    contentType: 'application/json; charset=utf-8',
                    success: function (data) {
                        calendarHighlitedDays = data;
                        if (data) {
                            var days = $('#calendar-datepicker .ui-datepicker-calendar tbody td a');
                            for (var i = 0; i < data.length; i++) {
                                var day = days.filter(function (index) { return $(this).text() === data[i].toString(); });
                                day.closest('td').addClass('ui-state-highlight');
                            }
                        }
                    }
                });
            }

        });
    </script>
}
